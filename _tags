# This has to take preference over the global flags...
<coq-libjs/jslib.ml>: warn(-39), warn_error(-39)
<coq-libjs/jslib.ml{,i}>: package(yojson), package(ppx_deriving_yojson)

# Coq-specific linking flags
true: rectypes, thread, package(str), package(unix), package(threads), package(num)

# Sertop/Serlib general flags
true: warn(+1..49-4-44), warn_error(+1..49-42), bin_annot, annot, safe_string, debug

# This needs to go first to avoid flag precedence problems.
<sertop/sertop_sexp.ml>: package(ppx_import), package(ppx_sexp_conv)

# Serlib building options
<serlib/*.{ml}>: package(ppx_import), package(ppx_sexp_conv)
<serlib/*.{ml,mli}>: package(sexplib), package(coq.intf), package(coq.stm)

<serlib/ide/*.{ml}>: package(ppx_import), package(ppx_sexp_conv)
<serlib/ide/*.{ml,mli}>: package(sexplib), package(coq.intf), package(coq.ide)

<serlib/plugins/ltac/*.{ml}>: package(ppx_import), package(ppx_sexp_conv)
<serlib/plugins/ltac/*.{ml,mli}>: package(sexplib), package(coq.intf), package(coq.ltac)

#, package(coq.idetop)

# Sertex building options
<sertex/*.{ml,mli}>: package(sexplib)

# Serapi building options
<serapi/*>: package(coq.intf), package(coq.ltac), package(coq.idetop)

# For sexp_option, etc...
<serapi/serapi_protocol.{ml,mli}>: package(sexplib)

# Sertop building options
<serlib>: include
<serlib/ide>: include
<serlib/plugins/ltac>: include

<sertex>: include
<serapi>: include

# Specifip to init
<sertop/*.{ml,mli}>: package(coq.intf)
<sertop/*>: package(coq.intf), package(coq.stm), package(coq.idetop)
<sertop/*>: package(sexplib), debug

# Specifip to toplevel
<sertop/sertop.ml>: package(cmdliner)
<sertop/sertop.{byte,native}>: linkall, package(str), package(dynlink), package(camlp5.gramlib), package(cmdliner), package(coq.intf), package(coq.ltac)

<sertop/sercomp.ml>: package(cmdliner)
<sertop/sercomp.{byte,native}>: linkall, package(dynlink), package(camlp5.gramlib), package(cmdliner)

# Js helpers (to go away)
<coq-libjs/*.{ml,mli}>: package(yojson)
<coq-libjs>: include

# Js Toplevel
<sertop/sertop_jslib.mli>: package(lwt)
<sertop/sertop_jslib.ml>: package(js_of_ocaml), package(yojson), package(ppx_deriving_yojson)
<sertop/sertop_js.ml>: package(js_of_ocaml.ppx), package(ppx_import), package(ppx_sexp_conv)
<sertop/sertop_js.byte>: linkall, package(dynlink), package(camlp5.gramlib), package(yojson), package(ppx_deriving_yojson), package(js_of_ocaml)

# Don't mess with this.
<js>: -traverse
